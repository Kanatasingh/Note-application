import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class NoteApplication {
    // ArrayList to store User objects
    private ArrayList<User> users;
    // Represents the currently logged-in user
    private User currentUser;
    // JFrame represents the main window of the application
    private JFrame frame;
    // JPanels for login, register, and note sections
    private JPanel loginPanel;
    private JPanel registerPanel;
    private JPanel notePanel;
    // Text fields for login and registration
    private JTextField loginUsernameField;
    private JPasswordField loginPasswordField;
    private JTextField registerUsernameField;
    private JPasswordField registerPasswordField;
    // Text area for creating and displaying notes
    private JTextArea noteTextArea;

    public NoteApplication() {
        // Initialize ArrayList and JFrame
        users = new ArrayList<>();
        frame = new JFrame("Note Application");
        frame.setSize(400, 300);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new CardLayout());

        // Create login, register, and note panels
        createLoginPanel();
        createRegisterPanel();
        createNotePanel();

        // Create a main panel to hold the login panel initially
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());
        mainPanel.add(loginPanel, BorderLayout.CENTER);

        // Add panels to the frame
        frame.add(mainPanel, "main");
        frame.add(registerPanel, "register");
        frame.add(notePanel, "note");

        // Display the login panel
        showPanel("main");
    }

    // Method to create the login panel
    private void createLoginPanel() {
        loginPanel = new JPanel();
        loginPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);

        // Create username and password labels and text fields
        JLabel usernameLabel = new JLabel("Username:");
        loginUsernameField = new JTextField(15);

        JLabel passwordLabel = new JLabel("Password:");
        loginPasswordField = new JPasswordField(15);

        // Create login and register buttons
        JButton loginButton = new JButton("Login");
        // Add action listener to handle login button click
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = loginUsernameField.getText();
                String password = new String(loginPasswordField.getPassword());

                // Check if login is successful
                if (login(username, password)) {
                    loginUsernameField.setText("");
                    loginPasswordField.setText("");
                    showPanel("note");
                } else {
                    JOptionPane.showMessageDialog(frame, "Invalid username or password!", "Login Failed", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        JLabel registerLabel = new JLabel("Don't have an account?");
        JButton registerButton = new JButton("Register");
        // Add action listener to handle register button click
        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loginUsernameField.setText("");
                loginPasswordField.setText("");
                showPanel("register");
            }
        });

        // Add components to the login panel using GridBagLayout
        gbc.gridx = 0;
        gbc.gridy = 0;
        loginPanel.add(usernameLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        loginPanel.add(loginUsernameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        loginPanel.add(passwordLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        loginPanel.add(loginPasswordField, gbc);

        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        loginPanel.add(loginButton, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        loginPanel.add(registerLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.CENTER;
        loginPanel.add(registerButton, gbc);
    }

    // Method to create the note panel
    private void createNotePanel() {
        notePanel = new JPanel();
        notePanel.setLayout(new BorderLayout());

        // Create a text area for notes
        noteTextArea = new JTextArea();
        noteTextArea.setLineWrap(true);
        noteTextArea.setEditable(true); // Enable text editing

        // Create buttons for creating notes and logging out
        JButton createNoteButton = new JButton("Create Note");
        // Add action listener to handle create note button click
        createNoteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String note = noteTextArea.getText();
                currentUser.addNote(note);
                noteTextArea.setText("");
                JOptionPane.showMessageDialog(frame, "Note created successfully!", "Note Created", JOptionPane.INFORMATION_MESSAGE);
            }
        });

        JButton logoutButton = new JButton("Logout");
        // Add action listener to handle logout button click
        logoutButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentUser = null;
                showPanel("main");
            }
        });

        // Add components to the note panel using BorderLayout
        notePanel.add(new JScrollPane(noteTextArea), BorderLayout.CENTER);
        notePanel.add(createNoteButton, BorderLayout.PAGE_END);
        notePanel.add(logoutButton, BorderLayout.SOUTH);
    }

    // Method to create the register panel
    private void createRegisterPanel() {
        registerPanel = new JPanel();
        registerPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);

        // Create username and password labels and text fields
        JLabel usernameLabel = new JLabel("Username:");
        registerUsernameField = new JTextField(15);

        JLabel passwordLabel = new JLabel("Password:");
        registerPasswordField = new JPasswordField(15);

        // Create register and login buttons
        JButton registerButton = new JButton("Register");
        // Add action listener to handle register button click
        registerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String username = registerUsernameField.getText();
                String password = new String(registerPasswordField.getPassword());

                // Check if registration is successful
                if (registerUser(username, password)) {
                    registerUsernameField.setText("");
                    registerPasswordField.setText("");
                    showPanel("note");
                } else {
                    JOptionPane.showMessageDialog(frame, "Username already exists!", "Registration Failed", JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        JLabel loginLabel = new JLabel("Already have an account?");
        JButton loginButton = new JButton("Login");
        // Add action listener to handle login button click
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                registerUsernameField.setText("");
                registerPasswordField.setText("");
                showPanel("main");
            }
        });

        // Add components to the register panel using GridBagLayout
        gbc.gridx = 0;
        gbc.gridy = 0;
        registerPanel.add(usernameLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 0;
        registerPanel.add(registerUsernameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        registerPanel.add(passwordLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 1;
        registerPanel.add(registerPasswordField, gbc);

        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        registerPanel.add(registerButton, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        registerPanel.add(loginLabel, gbc);

        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.CENTER;
        registerPanel.add(loginButton, gbc);
    }

    // Method to handle user login
    private boolean login(String username, String password) {
        for (User user : users) {
            if (user.getUsername().equals(username) && user.getPassword().equals(password)) {
                currentUser = user;
                return true;
            }
        }
        return false;
    }

    // Method to handle user registration
    private boolean registerUser(String username, String password) {
        for (User user : users) {
            if (user.getUsername().equals(username)) {
                return false; // Username already exists
            }
        }
        User newUser = new User(username, password);
        users.add(newUser);
        currentUser = newUser;
        return true;
    }

    // Method to switch between panels
    private void showPanel(String panelName) {
        CardLayout cardLayout = (CardLayout) frame.getContentPane().getLayout();
        cardLayout.show(frame.getContentPane(), panelName);
    }

    // Method to run the application
    public void run() {
        frame.setVisible(true);
    }

    // Main method to start the application
    public static void main(String[] args) {
        // Start the application on the Event Dispatch Thread
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                NoteApplication noteApp = new NoteApplication();
                noteApp.run();
            }
        });
    }
}
